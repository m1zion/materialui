/***CLASE 10***/
https://mui.com/material-ui/getting-started/overview/

Identificar los elementos
<contenedor/>
    <buscador>  primera informacion la de octocat
        <icon>
    <grid de la pagina/>


/***CLASE 13***/

agregar estilos a los botones

/***CLASE 14 agregando la funcionalidad ******/

1.  creamos los estados iniciales en App.jsx
    const [inputUser,setInputUser] = useState('octocat');
    const [userStater,userState] = useState('inputUser');
2. Los mandamos en el searcher
    <Searcher inputUser={inputUser} setInputUser={setInputUser}></Searcher>

/******CLASE 15  Vinculando la api********/
1. agregar constante con URL en constantes/index.js
2. En services/users.js crear el codigo para vincular api
3. en APP.js creamos el codigo para consultar la api    
      const gettingUser = async (user) => {
        const userResponse = await getGitHubUser(user)
        console.log(userResponse);
    }
    useEffect(()=>{
        gettingUser(inputUser)
    },[])


/******CLASE 16 asignamos el usuario not found a Local Storage********/
   1. Guardamos todo el Json inicial en la variable octocat de localstorage
   if(userState === 'octocat'){
      localStorage.setItem('octocat', userResponse)  
    }
    if(userResponse.message === 'Not Found'){
      const { octocat } = localStorage;
      setInputUser(octocat)
      setNotFound(true) 
    } else {
      setUserState(userResponse);
    }

/******CLASE 17 Creando el contenedor y trayendo la imagen de perfil del usuario********/
1. Crear un nuevo contenedor userCard

/*********CLASE 18
1.Creamos el archivo principalInformation en components
2. Lo llamamos desde nuestro userCard/index.jsx
  <PrincipalInformation userState={userState}/>